<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
	"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>WinMerge File Compare Report</title>
<style type="text/css">
<!--
table {margin: 0; border: 1px solid #a0a0a0; box-shadow: 1px 1px 2px rgba(0, 0, 0, 0.15);}
td,th {word-break: break-all; font-size: 8pt;padding: 0 3px;}
tr { vertical-align: top; }
.ln {text-align: right; word-break: normal; background-color: lightgrey;}
.title {color: white; background-color: blue; vertical-align: top; padding: 4px 4px; background: linear-gradient(mediumblue, darkblue);}
.sf3b2 {color: #000000; background-color: #ffffff; }
.sf3b5 {color: #000000; background-color: #0078d7; }
.sf3b14 {color: #000000; background-color: #ffa0a0; }
.sf3b16 {color: #000000; background-color: #f1e2ad; }
.sf3b18 {color: #000000; background-color: #ffaa82; }
.sf3b19 {color: #000000; background-color: #c8816c; }
.sf6b2 {color: #ffffff; background-color: #ffffff; }
.sf6b5 {color: #ffffff; background-color: #0078d7; }
.sf6b14 {color: #ffffff; background-color: #ffa0a0; }
.sf6b16 {color: #ffffff; background-color: #f1e2ad; }
.sf6b18 {color: #ffffff; background-color: #ffaa82; }
.sf6b19 {color: #ffffff; background-color: #c8816c; }
.sf7b2 {color: #0000ff; background-color: #ffffff; font-weight: bold; }
.sf7b5 {color: #0000ff; background-color: #0078d7; font-weight: bold; }
.sf7b14 {color: #0000ff; background-color: #ffa0a0; font-weight: bold; }
.sf7b16 {color: #0000ff; background-color: #f1e2ad; font-weight: bold; }
.sf7b18 {color: #0000ff; background-color: #ffaa82; font-weight: bold; }
.sf7b19 {color: #0000ff; background-color: #c8816c; font-weight: bold; }
.sf8b2 {color: #800080; background-color: #ffffff; }
.sf8b5 {color: #800080; background-color: #0078d7; }
.sf8b14 {color: #800080; background-color: #ffa0a0; }
.sf8b16 {color: #800080; background-color: #f1e2ad; }
.sf8b18 {color: #800080; background-color: #ffaa82; }
.sf8b19 {color: #800080; background-color: #c8816c; }
.sf9b2 {color: #008000; background-color: #ffffff; }
.sf9b5 {color: #008000; background-color: #0078d7; }
.sf9b14 {color: #008000; background-color: #ffa0a0; }
.sf9b16 {color: #008000; background-color: #f1e2ad; }
.sf9b18 {color: #008000; background-color: #ffaa82; }
.sf9b19 {color: #008000; background-color: #c8816c; }
.sf10b2 {color: #ff0000; background-color: #ffffff; }
.sf10b5 {color: #ff0000; background-color: #0078d7; }
.sf10b14 {color: #ff0000; background-color: #ffa0a0; }
.sf10b16 {color: #ff0000; background-color: #f1e2ad; }
.sf10b18 {color: #ff0000; background-color: #ffaa82; }
.sf10b19 {color: #ff0000; background-color: #c8816c; }
.sf11b2 {color: #606060; background-color: #ffffff; }
.sf11b5 {color: #606060; background-color: #0078d7; }
.sf11b14 {color: #606060; background-color: #ffa0a0; }
.sf11b16 {color: #606060; background-color: #f1e2ad; }
.sf11b18 {color: #606060; background-color: #ffaa82; }
.sf11b19 {color: #606060; background-color: #c8816c; }
.sf12b2 {color: #800000; background-color: #ffffff; }
.sf12b5 {color: #800000; background-color: #0078d7; }
.sf12b14 {color: #800000; background-color: #ffa0a0; }
.sf12b16 {color: #800000; background-color: #f1e2ad; }
.sf12b18 {color: #800000; background-color: #ffaa82; }
.sf12b19 {color: #800000; background-color: #c8816c; }
.sf13b2 {color: #0080c0; background-color: #ffffff; }
.sf13b5 {color: #0080c0; background-color: #0078d7; }
.sf13b14 {color: #0080c0; background-color: #ffa0a0; }
.sf13b16 {color: #0080c0; background-color: #f1e2ad; }
.sf13b18 {color: #0080c0; background-color: #ffaa82; }
.sf13b19 {color: #0080c0; background-color: #c8816c; }
.sf15b2 {color: #000000; background-color: #ffffff; }
.sf15b5 {color: #000000; background-color: #0078d7; }
.sf15b14 {color: #000000; background-color: #ffa0a0; }
.sf15b16 {color: #000000; background-color: #f1e2ad; }
.sf15b18 {color: #000000; background-color: #ffaa82; }
.sf15b19 {color: #000000; background-color: #c8816c; }
.sf17b2 {color: #000000; background-color: #ffffff; }
.sf17b5 {color: #000000; background-color: #0078d7; }
.sf17b14 {color: #000000; background-color: #ffa0a0; }
.sf17b16 {color: #000000; background-color: #f1e2ad; }
.sf17b18 {color: #000000; background-color: #ffaa82; }
.sf17b19 {color: #000000; background-color: #c8816c; }
.sf20b2 {color: #000080; background-color: #ffffff; }
.sf20b5 {color: #000080; background-color: #0078d7; }
.sf20b14 {color: #000080; background-color: #ffa0a0; }
.sf20b16 {color: #000080; background-color: #f1e2ad; }
.sf20b18 {color: #000080; background-color: #ffaa82; }
.sf20b19 {color: #000080; background-color: #c8816c; }
.sf21b2 {color: #0080c0; background-color: #ffffff; }
.sf21b5 {color: #0080c0; background-color: #0078d7; }
.sf21b14 {color: #0080c0; background-color: #ffa0a0; }
.sf21b16 {color: #0080c0; background-color: #f1e2ad; }
.sf21b18 {color: #0080c0; background-color: #ffaa82; }
.sf21b19 {color: #0080c0; background-color: #c8816c; }
-->
</style>
</head>
<body>
<table cellspacing="0" cellpadding="0" style="width:100%;">
<thead>
<tr>
<th colspan="2" class="title" style="width:50.000000%">C:\Users\brian\Desktop\IterMatch-Original.txt</th>
<th colspan="2" class="title" style="width:50.000000%">C:\Users\brian\Desktop\IterMatchApp.txt</th>
</tr>
</thead>
<tbody>
<tr>
<td class="ln"><a name="d1" href="#d1">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; ">################## Original iterMatch() was broken into the following two subroutines, which were then updated to work with Shiny. ################## </span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@title A 1-1 iterative optimal matching algorithm for data with missing values</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@title A 1-1 iterative optimal matching algorithm for data with missing values</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@description Creates a 1-1 matched sample between two groups. After building a</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@description Creates a 1-1 matched sample between two groups. After building a</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;distance matrix based on random forest and dealing with missing values using surrogate splits, it</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;distance matrix based on random forest and dealing with missing values using surrogate splits, it</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;uses a matching method called "OPTMATCH" to select subset of subjects that are</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;uses a matching method called "OPTMATCH" to select subset of subjects that are</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;matched using desirable balance threshold.</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;matched using desirable balance threshold.</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@param data Dataframe of subjects and variables</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@param data Dataframe of subjects and variables</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@param formula Formula which defines the response and matched variables</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@param formula Formula which defines the response and matched variables</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;Matching variables have to be separated by "+", and response varaible is</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;Matching variables have to be separated by "+", and response varaible is</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;separated by"~"</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;separated by"~"</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@param nTree An integer number of trees in the random forest</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@param nTree An integer number of trees in the random forest</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@param distance Claculating distance between two subjects i and j. Possible</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@param distance Claculating distance between two subjects i and j. Possible</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;values is "0-1" distance where distance of subjects in the same</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;values is "0-1" distance where distance of subjects in the same</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;terminal nodes are set to be zero, one, otherewise.</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;terminal nodes are set to be zero, one, otherewise.</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@param ID Unique subject ID</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@param ID Unique subject ID</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@param thresh A vector of real values defining in SMD threshold for matching</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@param thresh A vector of real values defining in SMD threshold for matching</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;variables in the order that they appear in formula</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;variables in the order that they appear in formula</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@param methodSMD Two methods are proposed to calculate SMD, "method-1" and</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@param methodSMD Two methods are proposed to calculate SMD, "method-1" and</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;"method-2"</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;"method-2"</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@param surrogates Creates surrogate splits if set to TRUE, otherwise the</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@param surrogates Creates surrogate splits if set to TRUE, otherwise the</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;default is FALSE</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;default is FALSE</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@param rfmtry Number of random variables to split at each node. The default</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@param rfmtry Number of random variables to split at each node. The default</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp; value is set to 3</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp; value is set to 3</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@param match.tol Specifies the extent to which fullmatch's output is</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@param match.tol Specifies the extent to which fullmatch's output is</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;permitted to differ from an optimal solution to the original problem. This</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;permitted to differ from an optimal solution to the original problem. This</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;parameteris taken from tol in \code{\link[optmatch]{fullmatch}}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;parameteris taken from tol in \code{\link[optmatch]{fullmatch}}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@param outputfile An output file containing results from all itterations and their balance measures</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@param outputfile An output file containing results from all itterations and their balance measures</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@return List Contains p-values and standardized mean difference for each variable after</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@return List Contains p-values and standardized mean difference for each variable after</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;creating paired sample matching in multiple iterations and matched sample</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;creating paired sample matching in multiple iterations and matched sample</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@import dplyr optmatch partykit rlist stddiff</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@import dplyr optmatch partykit rlist stddiff</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@export iterMatch</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@export iterMatch</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@usage iterMatch (data, formula, nTree,distance = c("0-1","p-value"),</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@usage iterMatch (data, formula, nTree,distance = c("0-1","p-value"),</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp; ID, thresh,methodSMD = c("method-1", "method-2"), surrogates = FALSE,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp; ID, thresh,methodSMD = c("method-1", "method-2"), surrogates = FALSE,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp; rfmtry = 3, match.tol = 0.001, outputfile = NULL)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp; rfmtry = 3, match.tol = 0.001, outputfile = NULL)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@examples form &lt;-DX_GROUP ~ RMSD + AGE_AT_SCAN + PIQ + SEX + HANDEDNESS_SCORES</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@examples form &lt;-DX_GROUP ~ RMSD + AGE_AT_SCAN + PIQ + SEX + HANDEDNESS_SCORES</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;iterMatch (data = data_1, formula = form, nTree = 100,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;iterMatch (data = data_1, formula = form, nTree = 100,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;distance = "p-value", ID = "SUB_ID", thresh = c(0.1, 0.1, 0.1, 0.1, 0.1),</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;distance = "p-value", ID = "SUB_ID", thresh = c(0.1, 0.1, 0.1, 0.1, 0.1),</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;methodSMD = "method-1", surrogates = T, outputfile = "output")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#' &nbsp;methodSMD = "method-1", surrogates = T, outputfile = "output")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@author Afrooz Jahedi, Tristan Hills</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#'@author Afrooz Jahedi, Tristan Hills</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a name="d2" href="#d2">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span class="sf17b16">iterMatch</span><span style="color: #000000; background-color: #ff8080; "> &lt;-</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span class="sf17b16">GenerateDissMatrix</span><span style="color: #000000; background-color: #ff8080; "> &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp;function (data,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;function (data,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;formula,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;formula,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;nTree,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;nTree,</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d3" href="#d3">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;distance,</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ID,</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;thresh,</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;methodSMD,</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;surrogates = FALSE,</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rfmtry = 3,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rfmtry = 3,</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d4" href="#d4">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">match.tol</span><span style="color: #000000; background-color: #ff8080; "> = </span><span class="sf17b16">0.001</span><span style="color: #000000; background-color: #ff8080; ">,</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">surrogates</span><span style="color: #000000; background-color: #ff8080; "> = </span><span class="sf17b16">FALSE</span><span style="color: #000000; background-color: #ff8080; ">,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">iseed</span><span style="color: #000000; background-color: #ff8080; "> = NULL,</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">outputfile</span><span style="color: #000000; background-color: #ff8080; "> = NULL,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">outputfile</span><span style="color: #000000; background-color: #ff8080; "> = </span><span class="sf17b16">NULL</span><span style="color: #000000; background-color: #ff8080; ">) {</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">displayProgressTracking</span><span style="color: #000000; background-color: #ff8080; "> = </span><span class="sf17b16">FALSE</span><span style="color: #000000; background-color: #ff8080; ">) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp;</span><span class="sf17b18">ptm</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">&lt;-</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">proc.time()</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a name="d5" href="#d5">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp;matchSampleFile &lt;- "matchedSample.csv"</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp;if (!is.null(outputfile)) {</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp;sink(outputfile)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a name="d6" href="#d6">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp;matchSampleFile &lt;-</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;file.path(dirname(outputfile),</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;paste0(strsplit(basename(outputfile), ".", fixed=T)[[1]][1], "_matches.csv"))</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp;results &lt;- list()</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;#==== setting parameters ====</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;#==== setting parameters ====</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;#Identify the response variable from the formula</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;#Identify the response variable from the formula</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;response &lt;- all.vars(formula)[1]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;response &lt;- all.vars(formula)[1]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;#Check if the response is a factor</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;#Check if the response is a factor</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;if (!is.factor(data[[response]])) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;if (!is.factor(data[[response]])) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;stop("response variable has to be a factor")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;stop("response variable has to be a factor")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;if (nlevels(data[[response]]) != 2) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;if (nlevels(data[[response]]) != 2) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;stop("response should have only 2 levels")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;stop("response should have only 2 levels")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; # if ( any( sort(unique(data[[response]]), decreasing = T) != c(1,0) ) ) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# if ( any( sort(unique(data[[response]]), decreasing = T) != c(1,0) ) ) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; # &nbsp; stop("response must be coded as 0 and 1")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# &nbsp; stop("response must be coded as 0 and 1")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; # }</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# }</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;# arrange columns with the smaller group being first. Don't want user to have to do this</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# arrange columns with the smaller group being first. Don't want user to have to do this</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;count &lt;- table(data[[response]])</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;count &lt;- table(data[[response]])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;if ( levels(data[[response]])[which.min(tabl<wbr>e(data[[response]]))] &lt; 1 ) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;if ( levels(data[[response]])[which.min(tabl<wbr>e(data[[response]]))] &lt; 1 ) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;#data &lt;- data[ order(data[[response]]), ]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#data &lt;- data[ order(data[[response]]), ]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;data &lt;- data[ order(data[[response]],decreasing = T), ]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;data &lt;- data[ order(data[[response]],decreasing = T), ]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; } else {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;} else {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; data &lt;- data[ order(data[[response]], decreasing = T), ]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;data &lt;- data[ order(data[[response]], decreasing = T), ]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; }</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a name="d7" href="#d7">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp;# set rownames</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp;rownames(data) &lt;- data[, ID]</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;#Form dataframe using variables from the formula and response variable</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;#Form dataframe using variables from the formula and response variable</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;selData &lt;- data[, all.vars(formula)]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;selData &lt;- data[, all.vars(formula)]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;# Check selData does not consist of any</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Check selData does not consist of any</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;for (x in names(selData)) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;for (x in names(selData)) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;if (x != response &amp; is.character(selData[, x])) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (x != response &amp; is.character(selData[, x])) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;stop(sprintf("%s column needs to be integer, numeric, or factor", x))</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;stop(sprintf("%s column needs to be integer, numeric, or factor", x))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;#Form dataframe with only matching variables</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;#Form dataframe with only matching variables</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;selVars &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;selVars &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;selData[, !names(selData) %in% response, drop = F]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;selData[, !names(selData) %in% response, drop = F]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;# Set the surrogate arguments</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Set the surrogate arguments</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;surrogateargs &lt;- NULL # make surrogate argument null</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;surrogateargs &lt;- NULL # make surrogate argument null</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;if ( is.list(surrogates) || surrogates ) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;if ( is.list(surrogates) || surrogates ) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# populate list with default arguments</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# populate list with default arguments</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;surrogateargs &lt;- list( "maxsurrogate" = 5 )</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;surrogateargs &lt;- list( "maxsurrogate" = 5 )</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;if ( is.list(surrogates) ) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if ( is.list(surrogates) ) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# check that the names in this list are correct</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# check that the names in this list are correct</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if ( !(names(surrogates) %in% names(surrogateargs)) ) &nbsp;{</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if ( !(names(surrogates) %in% names(surrogateargs)) ) &nbsp;{</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;stop("Not valid surrogate arguments")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;stop("Not valid surrogate arguments")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# set the surrogateargs from the list</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# set the surrogateargs from the list</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;surrogateargs[names(surrogates)] &lt;- surrogates[names(surrogates)]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;surrogateargs[names(surrogates)] &lt;- surrogates[names(surrogates)]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;#Balance Checking Before Matching#</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;#Balance Checking Before Matching#</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;#Check the balance of two groups for all matching variables</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;#Check the balance of two groups for all matching variables</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;print(summary(selData))</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;print(summary(selData))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;S = list()</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;S = list()</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;for (i in 1:length(selVars)) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;for (i in 1:length(selVars)) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;S[[i]] = summaryMatch(selData, names(selVars)[i], response)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S[[i]] = summaryMatch(selData, names(selVars)[i], response)</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d8" href="#d8">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp;allVarsSummary &lt;- </span><span class="sf17b16">list.append</span><span style="color: #000000; background-color: #ff8080; ">(S, S[[i]])</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;allVarsSummary &lt;- </span><span class="sf17b16">c</span><span style="color: #000000; background-color: #ff8080; ">(S, S[[i]])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;VarName &lt;- sapply(S, function(x) x$varname)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;VarName &lt;- sapply(S, function(x) x$varname)</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d9" href="#d9">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp;#list.cases(allVarsSummary, varname, sorted = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;SMD &lt;- lapply(S, function(x) x$smd)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;SMD &lt;- lapply(S, function(x) x$smd)</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d10" href="#d10">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp;#list.cases(allVarsSummary, smd, sorted = F, simplify = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp;#SMD &lt;- list.cases(allVarsSummary, smd, sorted = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;Pvalue &lt;- sapply(S, function(x) x$pval)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;Pvalue &lt;- sapply(S, function(x) x$pval)</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d11" href="#d11">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp;#list.cases(allVarsSummary, pval, sorted = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp;#print(t(rbind(VarName, SMD, Pvalue)))</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;formattedSummaryPrint(VarName, SMD, Pvalue)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;formattedSummaryPrint(VarName, SMD, Pvalue)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;#stop()</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;#stop()</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;print("Creating random forest ...")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;print("Creating random forest ...")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;#Set seed and create the random forest</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;#Set seed and create the random forest</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;set.seed(iseed)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;set.seed(iseed)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;ntrees &lt;- nTree</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;ntrees &lt;- nTree</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a name="d12" href="#d12">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;if(displayProgressTracking) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;progress &lt;- shiny::Progress$new(min=0, max=ntrees)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;on.exit(progress$close())</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;else {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;progress &lt;- NULL</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;rfRF100 &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;rfRF100 &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;growRF(</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;growRF(</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;ntrees = ntrees,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ntrees = ntrees,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;formula = formula,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;formula = formula,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;training = selData,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;training = selData,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;search = "greedy",</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;search = "greedy",</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;method = "class",</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;method = "class",</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;split = "gini",</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;split = "gini",</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;surrogateargs = surrogateargs,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;surrogateargs = surrogateargs,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;mtry = rfmtry,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;mtry = rfmtry,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;nsplit = NULL,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;nsplit = NULL,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;minsplit = 20,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;minsplit = 20,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;maxdepth = 10,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;maxdepth = 10,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;minbucket = 6,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;minbucket = 6,</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d13" href="#d13">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;progressIndicator = progress,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;bootstrap = FALSE</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bootstrap = FALSE</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a name="d14" href="#d14">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;if(is.null(rfRF100)) { return(NULL) }</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;# Setting the number of treated group</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Setting the number of treated group</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;ASD &lt;- selData[, response] == 1</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;ASD &lt;- selData[, response] == 1</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;nMin = NROW(selData[ASD,])</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;nMin = NROW(selData[ASD,])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;#==== Set distance definition ====</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;#==== Set distance definition ====</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;# Chi-square p-value</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Chi-square p-value</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d15" href="#d15">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp;</span><span class="sf17b16">if</span><span style="color: #000000; background-color: #ff8080; "> (</span><span class="sf17b16">distance</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">==</span><span style="color: #000000; background-color: #ff8080; "> </span><span style="color: #000000; background-color: #ff8080; ">"</span><span class="sf17b16">p-value"</span><span style="color: #000000; background-color: #ff8080; ">) </span><span class="sf17b18">{</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">progress$set</span><span style="color: #000000; background-color: #ff8080; ">(</span><span class="sf17b16">message="Sending</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">data</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">down...</span><span style="color: #000000; background-color: #ff8080; ">"</span><span class="sf17b18">,</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">value=0</span><span style="color: #000000; background-color: #ff8080; ">)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;print("Sending data down ...")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;print("Sending data down ...")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Extracting terminal node of all subjects across all trees</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Extracting terminal node of all subjects across all trees</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;nodeResponse &lt;- sapply(rfRF100, function(x) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;nodeResponse &lt;- sapply(rfRF100, function(x) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;predict(x$tree, newdata = selData, type = "node")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;predict(x$tree, newdata = selData, type = "node")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;})</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;})</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# Initiating distance matrix</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Initiating distance matrix</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;sumXDistMat = matrix(0,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;sumXDistMat = matrix(0,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; nrow = NROW(nodeResponse),</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; nrow = NROW(nodeResponse),</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ncol = NROW(nodeResponse))</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ncol = NROW(nodeResponse))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# Give labels to the rows of the distance matrix</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Give labels to the rows of the distance matrix</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;colnames(sumXDistMat) &lt;- rownames(nodeResponse)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;colnames(sumXDistMat) &lt;- rownames(nodeResponse)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;#Give labels to the rows of the distance matrix</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;#Give labels to the rows of the distance matrix</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;rownames(sumXDistMat) &lt;- rownames(nodeResponse)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;rownames(sumXDistMat) &lt;- rownames(nodeResponse)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;#Set number of trees</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;#Set number of trees</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;ntrees &lt;- nTree</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;ntrees &lt;- nTree</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;print("Calculate the distance ...")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;print("Calculate the distance ...")</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d16" href="#d16">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;progress$set(message="Calculating distances: ", value=0, detail=paste("(0/", ntrees, ")", sep=""))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;#Calculate the the defined distance</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;#Calculate the the defined distance</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;t &lt;- proc.time()</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;t &lt;- proc.time()</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;for (treeNum in 1:ntrees) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;for (treeNum in 1:ntrees) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;sumXDistMat &lt;- sumXDistMat + x2Dist(rfRF100[[treeNum]]$tree,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sumXDistMat &lt;- sumXDistMat + x2Dist(rfRF100[[treeNum]]$tree,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;nodeResponse, treeNum, response)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;nodeResponse, treeNum, response)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;if (treeNum %% 50 == 0) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (treeNum %% 50 == 0) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print( sprintf("Distance on tree %d (%.2f s) ... ", treeNum, (proc.time()- t)[3]) )</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print( sprintf("Distance on tree %d (%.2f s) ... ", treeNum, (proc.time()- t)[3]) )</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d17" href="#d17">.</a></td><td style="color: #000000; background-color: #ff8080; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b18">progress$inc(1,</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">detail=paste("(",</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">treeNum,</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">"/",</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">ntrees,</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">")",</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">sep=""))</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a name="d18" href="#d18">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;progress$set(message="Cleaning up...", value=ntrees)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# Calculate the average distance</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Calculate the average distance</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;xDistFor &lt;- sumXDistMat / ntrees</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;xDistFor &lt;- sumXDistMat / ntrees</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# Give unique label to the created distance matrix's rows and columns</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Give unique label to the created distance matrix's rows and columns</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;rownames(xDistFor) &lt;- rownames(selData)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;rownames(xDistFor) &lt;- rownames(selData)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;colnames(xDistFor) &lt;- rownames(selData)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;colnames(xDistFor) &lt;- rownames(selData)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# Subset the distance matrix conntains only ASD as rows and TD as columns</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Subset the distance matrix conntains only ASD as rows and TD as columns</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;if (NROW(selData[ASD, ]) &lt; NROW(selData[!ASD, ])) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;if (NROW(selData[ASD, ]) &lt; NROW(selData[!ASD, ])) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;x2distForSel &lt;- xDistFor[1:nMin, (nMin + 1):ncol(xDistFor)]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x2distForSel &lt;- xDistFor[1:nMin, (nMin + 1):ncol(xDistFor)]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;rownames(x2distForSel) &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rownames(x2distForSel) &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rownames(selData[1:nMin, ])</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rownames(selData[1:nMin, ])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;colnames(x2distForSel) &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;colnames(x2distForSel) &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rownames(selData[(nMin + 1):ncol(xDistFor), ])</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rownames(selData[(nMin + 1):ncol(xDistFor), ])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;} else{</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;} else{</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;x2distForSel &lt;- xDistFor[1:nMin, (nMin + 1):ncol(xDistFor)]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x2distForSel &lt;- xDistFor[1:nMin, (nMin + 1):ncol(xDistFor)]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;rownames(x2distForSel) &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rownames(x2distForSel) &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rownames(selData[1:nMin, ])</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rownames(selData[1:nMin, ])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;colnames(x2distForSel) &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;colnames(x2distForSel) &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rownames(selData[(nMin + 1):ncol(xDistFor), ])</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rownames(selData[(nMin + 1):ncol(xDistFor), ])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;x2distForSel &lt;-t(x2distForSel)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x2distForSel &lt;-t(x2distForSel)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# Distance matrix</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Distance matrix</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d19" href="#d19">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">DM</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">&lt;-</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">x2distForSel</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">return(x2distForSel)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp;</span><span class="sf17b16">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> </span>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a name="d20" href="#d20">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; ">iterMatch &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp;function (data,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;formula,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DM,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ID,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;thresh,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;methodSMD,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;match.tol = 0.001,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;iseed = NULL,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;outputfile = "output.txt",</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;asyncTimer = NULL) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;iterNum = 1</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;allSmds &lt;- list()</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;allIncludedSubjects &lt;- list()</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;allResults &lt;- list()</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;#Identify the response variable from the formula</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;response &lt;- all.vars(formula)[1]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;#Form dataframe using variables from the formula and response variable</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;selData &lt;- data[, all.vars(formula)]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;selVars &lt;- selData[, !names(selData) %in% response, drop = F]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;ptm &lt;- proc.time()</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;matchSampleFile &lt;- "matchedSample.csv"</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;if (!is.null(outputfile)) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sink(outputfile)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;matchSampleFile &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;file.path(dirname(outputfile),</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;paste0(strsplit(basename(outputfile), ".", fixed=T)[[1]][1], "_matches.csv"))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# SMD method</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# SMD method</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;if (methodSMD == "method-1") {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;if (methodSMD == "method-1") {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;print("Entering method-1 ...")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print("Entering method-1 ...")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# Create a 1-1 match with sum of discrepancies for all treatments</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Create a 1-1 match with sum of discrepancies for all treatments</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# and controls placed into the same matched sets.</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# and controls placed into the same matched sets.</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;print("Starting fullMatch ...")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print("Starting fullMatch ...")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;optMatch &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;optMatch &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;fullmatch(</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fullmatch(</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DM,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DM,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;min.controls = 1,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;min.controls = 1,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;max.controls = 1,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;max.controls = 1,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;omit.fraction = NULL,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;omit.fraction = NULL,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tol = match.tol,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tol = match.tol,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subclass.indices = NULL</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subclass.indices = NULL</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# Summary of optimal matched sample</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Summary of optimal matched sample</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;summary(optMatch)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;summary(optMatch)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;print("Done with fullMatch ...")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print("Done with fullMatch ...")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;print("Writing output to subjMatch.txt ...")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print("Writing output to subjMatch.txt ...")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# Write output of matched treated vs control into a file (capturing the output from terminal)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Write output of matched treated vs control into a file (capturing the output from terminal)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;subMatchFile &lt;- sprintf("subjMatch_%s.txt", gsub("[.]", "-", format(Sys.time(), "%Y%m%d-%H-%M-%OS3")))</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subMatchFile &lt;- sprintf("subjMatch_%s.txt", gsub("[.]", "-", format(Sys.time(), "%Y%m%d-%H-%M-%OS3")))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;capture.output(print(optMatch, grouped = T), file = subMatchFile)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;capture.output(print(optMatch, grouped = T), file = subMatchFile)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;print("Reading in subjMatch.txt ...")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print("Reading in subjMatch.txt ...")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# Read in the captured output as an object</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Read in the captured output as an object</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;subjMatch &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subjMatch &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;read.table(</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;read.table(</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subMatchFile,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subMatchFile,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;header = T,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;header = T,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;colClasses = c("character", "character")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;colClasses = c("character", "character")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;print(subjMatch)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(subjMatch)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;if (file.exists(subMatchFile)) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (file.exists(subMatchFile)) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;file.remove(subMatchFile)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;file.remove(subMatchFile)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;print("Binding rows ...")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print("Binding rows ...")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# Binding row wise of subject ID (First treated then control)into a one column</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Binding row wise of subject ID (First treated then control)into a one column</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;splitSubj &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;splitSubj &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;do.call("rbind", strsplit(c(</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;do.call("rbind", strsplit(c(</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;as.character(subjMatch$Group),</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;as.character(subjMatch$Group),</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;as.character(subjMatch$Members)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;as.character(subjMatch$Members)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;), ","))</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;), ","))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# Create a dataframe consisits of two columns of pair number and unique subject ID</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Create a dataframe consisits of two columns of pair number and unique subject ID</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;print("Creating dataframe ...")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print("Creating dataframe ...")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;splitSubjMem &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;splitSubjMem &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;data.frame(pairNum = rep(1:length(levels(optMatch)),</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;data.frame(pairNum = rep(1:length(levels(optMatch)),</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2), SUB_ID = splitSubj)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2), SUB_ID = splitSubj)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;print("Add subject ID data ...")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print("Add subject ID data ...")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# Add a column of subject ID to the data</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Add a column of subject ID to the data</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SelDataID &lt;- data.frame(selData, SUB_ID = rownames(selData))</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SelDataID &lt;- data.frame(selData, SUB_ID = rownames(selData))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;print("Merge data frame of matching variables ...")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print("Merge data frame of matching variables ...")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# Merge dataframes of all matching variables, pair number by Unique subject ID</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Merge dataframes of all matching variables, pair number by Unique subject ID</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;optData &lt;- merge(SelDataID, splitSubjMem, by = "SUB_ID")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;optData &lt;- merge(SelDataID, splitSubjMem, by = "SUB_ID")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# Sorting data based on group</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Sorting data based on group</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;optData &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;optData &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;(optData[order(optData[, response], decreasing = F),])</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(optData[order(optData[, response], decreasing = F),])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a name="d21" href="#d21">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp;cat("0-it</span><span class="sf17b18">t</span><span style="color: #000000; background-color: #ff8080; ">eration", "\n")</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cat("0-it</span><span style="color: #000000; background-color: #ff8080; ">eration", "\n")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; a &lt;- optData$SUB_ID</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;a &lt;- optData$SUB_ID</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;write.csv(cbind(data.frame(ID = a),selData[a, ]), file = matchSampleFile, row.names = F)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;write.csv(cbind(data.frame(ID = a),selData[a, ]), file = matchSampleFile, row.names = F)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# Calculate the matched sample balance</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Calculate the matched sample balance</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;print("Calculate sample balance")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print("Calculate sample balance")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;S = list()</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S = list()</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;for (i in 1:length(selVars)) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for (i in 1:length(selVars)) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;S[[i]] = summaryMatch(optData, names(selVars)[i], response)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S[[i]] = summaryMatch(optData, names(selVars)[i], response)</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d22" href="#d22">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;allVarsSummary &lt;- </span><span class="sf17b16">list.append</span><span style="color: #000000; background-color: #ff8080; ">(S, S[[i]])</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;allVarsSummary &lt;- </span><span class="sf17b16">c</span><span style="color: #000000; background-color: #ff8080; ">(S, S[[i]])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;VarName &lt;- sapply(S, function(x) x$varname)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;VarName &lt;- sapply(S, function(x) x$varname)</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d23" href="#d23">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;#list.cases(allVarsSummary, varname, sorted = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;SMD &lt;- lapply(S, function(x) x$smd)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SMD &lt;- lapply(S, function(x) x$smd)</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d24" href="#d24">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;#list.cases(allVarsSummary, smd, sorted = F, simplify = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp;#SMD &lt;- list.cases(allVarsSummary, smd, sorted = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;Pvalue &lt;- sapply(S, function(x) x$pval)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Pvalue &lt;- sapply(S, function(x) x$pval)</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d25" href="#d25">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;#list.cases(allVarsSummary, pval, sorted = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp;#print(rbind(VarName, SMD, Pvalue))</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;formattedSummaryPrint(VarName, SMD, Pvalue)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;formattedSummaryPrint(VarName, SMD, Pvalue)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;results &lt;- list()</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;results &lt;- list()</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;results$matches &lt;- cbind(data.frame(ID = a), selData[a, ])</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;results$matches &lt;- cbind(data.frame(ID = a), selData[a, ])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;results$varname &lt;- VarName</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;results$varname &lt;- VarName</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;results$smd &lt;- SMD</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;results$smd &lt;- SMD</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;results$pvalue &lt;- Pvalue</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;results$pvalue &lt;- Pvalue</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a name="d26" href="#d26">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp;# </span><span class="sf17b16">Check</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">the</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">SMD</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">threshold</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">condition</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">for</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">a</span><span style="color: #000000; background-color: #ff8080; "> all </span><span class="sf17b16">matching</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">variables</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# </span><span class="sf17b16">build</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">aggregated</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">lists</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">from</span><span style="color: #000000; background-color: #ff8080; "> </span><span style="color: #000000; background-color: #ff8080; ">all </span><span class="sf17b16">iterations</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">#</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">condition</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">&lt;-</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">abs</span><span style="color: #000000; background-color: #ff8080; ">(</span><span class="sf17b16">sapply(S</span><span style="color: #000000; background-color: #ff8080; ">, </span><span class="sf17b16">function(x</span><span style="color: #000000; background-color: #ff8080; ">)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">allResults[[1]]</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">=</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">results</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp;# &nbsp; </span><span class="sf17b16">x$smd))</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">&lt;</span><span style="color: #000000; background-color: #ff8080; "> t</span><span class="sf17b16">hresh</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">queue$producer$fireAssignReactive</span><span style="color: #000000; background-color: #ff8080; ">(</span><span class="sf17b16">"allR<wbr>esultsReactive"</span><span style="color: #000000; background-color: #ff8080; ">, </span><span class="sf17b16">allResults</span><span style="color: #000000; background-color: #ff8080; ">) # </span><span class="sf17b16">Using</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">ipc</span><span style="color: #000000; background-color: #ff8080; "> t</span><span class="sf17b16">o</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">update</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">graph</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">as</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">iterMatch</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">runs</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# check SMD threshold</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# check SMD threshold</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;condition &lt;- rep(FALSE, length(thresh))</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;condition &lt;- rep(FALSE, length(thresh))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;for (i in 1:length(S)) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for (i in 1:length(S)) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;x &lt;- S[[i]]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x &lt;- S[[i]]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;x_logic &lt;- abs(x$smd) &lt; thresh[i]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x_logic &lt;- abs(x$smd) &lt; thresh[i]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;x_logic &lt;- x_logic[!is.na(x_logic)]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x_logic &lt;- x_logic[!is.na(x_logic)]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;if (all(x_logic)) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (all(x_logic)) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;condition[i] &lt;- TRUE</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;condition[i] &lt;- TRUE</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;prodCondition &lt;- prod(condition)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;prodCondition &lt;- prod(condition)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;iteration &lt;- 1</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;iteration &lt;- 1</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d27" href="#d27">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp;cat(iteration, "it</span><span class="sf17b18">t</span><span style="color: #000000; background-color: #ff8080; ">eration" , sep = "-", "\n")</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cat(iteration, "it</span><span style="color: #000000; background-color: #ff8080; ">eration" , sep = "-", "\n")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# While the condition is not satisfied do</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# While the condition is not satisfied do</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;print("Starting the while loop ...")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print("Starting the while loop ...")</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d28" href="#d28">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;asyncTimer$set(message="Iterations: ", detail=iteration, value=1)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;while (prodCondition == 0) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;while (prodCondition == 0) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;if (prodCondition == 0)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (prodCondition == 0)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Retrive the distance between the matched treated vs control subjects</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Retrive the distance between the matched treated vs control subjects</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# if (NROW(selData[ASD,]) &lt; NROW(selData[!ASD,])) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# if (NROW(selData[ASD,]) &lt; NROW(selData[!ASD,])) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;distance &lt;- NULL</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;distance &lt;- NULL</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d29" href="#d29">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">for</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">(i</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">in</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">1:(</span><span style="color: #000000; background-color: #ff8080; ">table(optData[, response])[1]</span><span style="color: #000000; background-color: #ff8080; ">)</span><span style="color: #000000; background-color: #ff8080; ">) </span><span style="color: #000000; background-color: #ff8080; ">{</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">distance</span><span style="color: #000000; background-color: #ff8080; "> </span><span style="color: #000000; background-color: #ff8080; ">&lt;</span><span class="sf17b18">-</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">c(distance</span><span style="color: #000000; background-color: #ff8080; ">, </span><span style="color: #000000; background-color: #ff8080; ">(</span><span class="sf17b16">DM[</span><span style="color: #000000; background-color: #ff8080; ">as.character(splitSubj[i, 1])</span><span class="sf17b18">,</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">groupSize</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">&lt;-</span><span style="color: #000000; background-color: #ff8080; "> </span><span style="color: #000000; background-color: #ff8080; ">table(optData[, response])[1]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="color: #000000; background-color: #ff8080; ">as.character(splitSubj[</span><span class="sf17b18">(</span><span style="color: #000000; background-color: #ff8080; ">i + </span><span class="sf17b16">(table(optData[</span><span style="color: #000000; background-color: #ff8080; ">, </span><span class="sf17b18">response])[</span><span style="color: #000000; background-color: #ff8080; ">1])</span><span class="sf17b16">)</span><span style="color: #000000; background-color: #ff8080; ">, </span><span class="sf17b16">1</span><span style="color: #000000; background-color: #ff8080; ">])</span><span class="sf17b18">]))</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b18">asyncTimer$set(message="Iterations:</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">",</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">detail=iteration,</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">value=iteration</span><span style="color: #000000; background-color: #ff8080; ">)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b18">print(groupSize</span><span style="color: #000000; background-color: #ff8080; ">)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b18">print("groupSize")</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b18">if(groupSize</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">&lt;</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">MIN_GROUP_SIZE)</span><span style="color: #000000; background-color: #ff8080; "> {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">print(paste("Group</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">size</span><span style="color: #000000; background-color: #ff8080; "> &lt;</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">"</span><span style="color: #000000; background-color: #ff8080; ">, </span><span class="sf17b18">MIN_GROUP_SIZE,</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">".</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">Exiting</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">iterMatch.",</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">sep=""))</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b18">return</span><span style="color: #000000; background-color: #ff8080; ">(</span><span class="sf17b18">allResults)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b18">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b18">for</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">(i</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">in</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">1:groupSize)</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">{</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b18">subj1</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">= </span><span style="color: #000000; background-color: #ff8080; ">as.character(splitSubj[i, 1])</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b18">subj2</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">=</span><span style="color: #000000; background-color: #ff8080; "> as.character(splitSubj[</span><span style="color: #000000; background-color: #ff8080; ">i + </span><span class="sf17b16">groupSize</span><span style="color: #000000; background-color: #ff8080; ">, </span><span style="color: #000000; background-color: #ff8080; ">1])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b18">distance</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">&lt;-</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">c(distance</span><span style="color: #000000; background-color: #ff8080; ">, </span><span class="sf17b18">DM[subj1,</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">subj2</span><span style="color: #000000; background-color: #ff8080; ">])</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Create a dataframe paired subject ID and the corresponding distance</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Create a dataframe paired subject ID and the corresponding distance</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;splitSubj &lt;- data.frame(splitSubj, distance)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;splitSubj &lt;- data.frame(splitSubj, distance)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Find the max distance bet</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Find the max distance bet</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;excSubj &lt;- splitSubj[which.max(splitSubj[, "distance"]), "splitSubj"]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;excSubj &lt;- splitSubj[which.max(splitSubj[, "distance"]), "splitSubj"]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Print the farthest distance treated or control subject</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Print the farthest distance treated or control subject</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;print(excSubj)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(excSubj)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Count number of subjects in smaller group</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Count number of subjects in smaller group</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# In matching, both groups have equal number of subjs</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# In matching, both groups have equal number of subjs</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d30" href="#d30">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;allMatchSubj = splitSubj[1:(table(optData[, response])[2]),</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;allMatchSubj = splitSubj[1:(table(optData[, response])[2]), 1]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1]</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# The remained subjects from smaller group</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# The remained subjects from smaller group</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d31" href="#d31">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;remainedASD &lt;-</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;remainedASD &lt;- as.character(allMatchSubj[allMatchSubj != excSubj])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;as.character(allMatchSubj[allMatchSubj !=</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;excSubj])</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# print(remainedASD)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# print(remainedASD)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Retrieve the distance matrix with remaining smaller subject group and all subjects from larger group</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Retrieve the distance matrix with remaining smaller subject group and all subjects from larger group</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;trimedDM &lt;- DM[remainedASD,]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;trimedDM &lt;- DM[remainedASD,]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Match remaining subjects from both groups</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Match remaining subjects from both groups</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;optMatch &lt;- fullmatch(</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;optMatch &lt;- fullmatch(</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;trimedDM,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;trimedDM,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;min.controls = 1,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;min.controls = 1,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;max.controls = 1,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;max.controls = 1,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;omit.fraction = NULL,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;omit.fraction = NULL,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tol = match.tol,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tol = match.tol,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subclass.indices = NULL</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subclass.indices = NULL</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Summary of optimal matched sample</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Summary of optimal matched sample</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;summary(optMatch)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;summary(optMatch)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;#print(optMatch, responseed = T)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#print(optMatch, responseed = T)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;subMatchFile &lt;- sprintf("subjMatch_%s.txt", gsub("[.]", "-", format(Sys.time(), "%Y%m%d-%H-%M-%OS3")))</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subMatchFile &lt;- sprintf("subjMatch_%s.txt", gsub("[.]", "-", format(Sys.time(), "%Y%m%d-%H-%M-%OS3")))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Write output of matched treated vs control into a file &nbsp;(capturing the output from terminal)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Write output of matched treated vs control into a file &nbsp;(capturing the output from terminal)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;capture.output(print(optMatch, grouped = T), file = subMatchFile)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;capture.output(print(optMatch, grouped = T), file = subMatchFile)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;print(optMatch, grouped = T)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(optMatch, grouped = T)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Read in the captured output as an object</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Read in the captured output as an object</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;subjMatch &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subjMatch &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;read.table(</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;read.table(</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subMatchFile,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subMatchFile,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;header = T,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;header = T,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;colClasses = c("character", "character")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;colClasses = c("character", "character")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">print(subjMatch)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(subjMatch)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;if (file.exists(subMatchFile)) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (file.exists(subMatchFile)) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;file.remove(subMatchFile)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;file.remove(subMatchFile)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Binding row wise of subject ID (First treated then control)into a one column</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Binding row wise of subject ID (First treated then control)into a one column</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;splitSubj &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;splitSubj &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;do.call("rbind", strsplit(c(</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;do.call("rbind", strsplit(c(</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;as.character(subjMatch$Group),</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;as.character(subjMatch$Group),</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;as.character(subjMatch$Members)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;as.character(subjMatch$Members)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;), ","))</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;), ","))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Subset dataframes of all matching variables, pair number by Unique subject ID</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Subset dataframes of all matching variables, pair number by Unique subject ID</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;optData &lt;- selData[splitSubj,]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;optData &lt;- selData[splitSubj,]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Make sure the subject labels are assigned correctly</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Make sure the subject labels are assigned correctly</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;a &lt;- rownames(optData)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;a &lt;- rownames(optData)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;print(a)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(a)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;optimData &lt;- selData[a,]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;optimData &lt;- selData[a,]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;iteration &lt;- iteration + 1</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;iteration &lt;- iteration + 1</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;write.csv(cbind(data.frame(ID=a), selData[a, ]), file = matchSampleFile, row.names = T)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;write.csv(cbind(data.frame(ID=a), selData[a, ]), file = matchSampleFile, row.names = T)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;cat(</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cat(</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;iteration,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;iteration,</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d32" href="#d32">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;"it</span><span class="sf17b18">t</span><span style="color: #000000; background-color: #ff8080; ">eration============================<wbr>=================" ,</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;"it</span><span style="color: #000000; background-color: #ff8080; ">eration=============================<wbr>================" ,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sep = "-",</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sep = "-",</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;"\n"</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;"\n"</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Calc the balance of the matched sample</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Calc the balance of the matched sample</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;S = list()</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S = list()</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;for (i in 1:length(selVars)) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for (i in 1:length(selVars)) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S[[i]] = summaryMatch(optimData, names(selVars)[i], response)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S[[i]] = summaryMatch(optimData, names(selVars)[i], response)</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d33" href="#d33">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;allVarsSummary &lt;- </span><span class="sf17b16">list.append</span><span style="color: #000000; background-color: #ff8080; ">(S, S[[i]])</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;allVarsSummary &lt;- </span><span class="sf17b16">c</span><span style="color: #000000; background-color: #ff8080; ">(S, S[[i]])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;varName &lt;- sapply(S, function(x) x$varname)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;varName &lt;- sapply(S, function(x) x$varname)</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d34" href="#d34">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#list.cases(allVarsSummary, varname, sorted = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;SMD &lt;- lapply(S, function(x) x$smd)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SMD &lt;- lapply(S, function(x) x$smd)</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d35" href="#d35">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#list.cases(allVarsSummary, smd, sorted = F, simplify = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;#SMD &lt;- list.cases(allVarsSummary, smd, sorted = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;pvalue &lt;- sapply(S, function(x) x$pval)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;pvalue &lt;- sapply(S, function(x) x$pval)</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d36" href="#d36">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#list.cases(allVarsSummary, pval, sorted = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;#print(rbind(varName, SMD, pvalue))</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;formattedSummaryPrint(varName, SMD, pvalue)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;formattedSummaryPrint(varName, SMD, pvalue)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;results &lt;- list()</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;results &lt;- list()</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;results$matches &lt;- cbind(data.frame(ID=a), selData[a, ])</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;results$matches &lt;- cbind(data.frame(ID=a), selData[a, ])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;results$varname &lt;- varName</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;results$varname &lt;- varName</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;results$smd &lt;- SMD</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;results$smd &lt;- SMD</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;results$pvalue &lt;- pvalue</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;results$pvalue &lt;- pvalue</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a name="d37" href="#d37">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;# </span><span class="sf17b16">#</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">Check</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">the</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">conditions</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">for</span><span style="color: #000000; background-color: #ff8080; "> all </span><span class="sf17b16">variable</span><span style="color: #000000; background-color: #ff8080; ">s</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">#</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">condition</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">&lt;-</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">abs</span><span style="color: #000000; background-color: #ff8080; ">(</span><span class="sf17b16">sapply(S</span><span style="color: #000000; background-color: #ff8080; ">, </span><span class="sf17b16">function(x</span><span style="color: #000000; background-color: #ff8080; ">)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# </span><span class="sf17b16">build</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">aggregated</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">lists</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">from</span><span style="color: #000000; background-color: #ff8080; "> </span><span style="color: #000000; background-color: #ff8080; ">all </span><span class="sf17b16">iteration</span><span style="color: #000000; background-color: #ff8080; ">s</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;# &nbsp; </span><span class="sf17b16">x$smd))</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">&lt;</span><span style="color: #000000; background-color: #ff8080; "> t</span><span class="sf17b16">hresh</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">allResults[[iteration]]</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">=</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">results</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="color: #000000; background-color: #ff8080; "># </span><span class="sf17b16">c</span><span style="color: #000000; background-color: #ff8080; ">heck SMD threshold</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">queue$producer$fireAssignReactive</span><span style="color: #000000; background-color: #ff8080; ">(</span><span class="sf17b16">"allR<wbr>esultsReactive"</span><span style="color: #000000; background-color: #ff8080; ">, </span><span class="sf17b16">allResults</span><span style="color: #000000; background-color: #ff8080; ">) # </span><span class="sf17b16">Using</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">ipc</span><span style="color: #000000; background-color: #ff8080; "> t</span><span class="sf17b16">o</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">update</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">graph</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">as</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">iterMatch</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">runs</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# </span><span class="sf17b16">C</span><span style="color: #000000; background-color: #ff8080; ">heck SMD threshold</span><span class="sf17b18">s</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;condition &lt;- rep(FALSE, length(thresh))</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;condition &lt;- rep(FALSE, length(thresh))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;for (i in 1:length(S)) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for (i in 1:length(S)) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x &lt;- S[[i]]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x &lt;- S[[i]]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x_logic &lt;- abs(x$smd) &lt; thresh[i]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x_logic &lt;- abs(x$smd) &lt; thresh[i]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x_logic &lt;- x_logic[!is.na(x_logic)]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x_logic &lt;- x_logic[!is.na(x_logic)]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (all(x_logic)) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (all(x_logic)) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;condition[i] &lt;- TRUE</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;condition[i] &lt;- TRUE</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;prodCondition &lt;- prod(condition)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;prodCondition &lt;- prod(condition)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;print(proc.time() - ptm)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(proc.time() - ptm)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;sink()</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sink()</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;# =======================================<wbr>================================</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# =======================================<wbr>================================</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d38" href="#d38">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp;else{</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;else{ </span><span class="sf17b18">#</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">method-2</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;optMatch &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;optMatch &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;fullmatch(</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fullmatch(</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DM,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DM,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;min.controls = 1,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;min.controls = 1,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;max.controls = 1,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;max.controls = 1,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;omit.fraction = NULL,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;omit.fraction = NULL,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tol = match.tol,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tol = match.tol,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subclass.indices = NULL</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subclass.indices = NULL</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;summary(optMatch)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;summary(optMatch)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;#=== write output to a file to be used again as an obj in R ====</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#=== write output to a file to be used again as an obj in R ====</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;subMatchFile &lt;- sprintf("subjMatch_%s.txt", gsub("[.]", "-", format(Sys.time(), "%Y%m%d-%H-%M-%OS3")))</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subMatchFile &lt;- sprintf("subjMatch_%s.txt", gsub("[.]", "-", format(Sys.time(), "%Y%m%d-%H-%M-%OS3")))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;capture.output(print(optMatch, grouped = T), file = subMatchFile)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;capture.output(print(optMatch, grouped = T), file = subMatchFile)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;subjMatch &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subjMatch &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;read.table(</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;read.table(</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subMatchFile,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subMatchFile,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;header = T,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;header = T,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;colClasses = c("character", "character")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;colClasses = c("character", "character")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">print(subjMatch)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(subjMatch)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;#one column treated first and control later</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#one column treated first and control later</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;splitSubj &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;splitSubj &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;do.call("rbind", strsplit(c(</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;do.call("rbind", strsplit(c(</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;as.character(subjMatch$Group),</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;as.character(subjMatch$Group),</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;as.character(subjMatch$Members)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;as.character(subjMatch$Members)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;), ","))</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;), ","))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# delete temporary file</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# delete temporary file</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;if (file.exists(subMatchFile)) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (file.exists(subMatchFile)) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;file.remove(subMatchFile)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;file.remove(subMatchFile)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# Create a dataframe of all IDs (treeated first) along pair number</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Create a dataframe of all IDs (treeated first) along pair number</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;splitSubjMem &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;splitSubjMem &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;data.frame(pairNum = rep(1:length(levels(optMatch)), 2), SUB_ID = splitSubj)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;data.frame(pairNum = rep(1:length(levels(optMatch)), 2), SUB_ID = splitSubj)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# Add SUB_ID variable as another variable to the dataframe</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Add SUB_ID variable as another variable to the dataframe</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;SelDataID &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SelDataID &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;data.frame(selData, SUB_ID = rownames(selData))</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;data.frame(selData, SUB_ID = rownames(selData))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# Merging selected matched data with the original data to create matched dataframe</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Merging selected matched data with the original data to create matched dataframe</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;optData &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;optData &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;merge(splitSubjMem, SelDataID, by = "SUB_ID")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;merge(splitSubjMem, SelDataID, by = "SUB_ID")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# Sorting data based on group</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Sorting data based on group</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; optData &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;optData &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;(optData[order(optData[, response], decreasing = F),])</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(optData[order(optData[, response], decreasing = F),])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a name="d39" href="#d39">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp;cat("0-it</span><span class="sf17b18">t</span><span style="color: #000000; background-color: #ff8080; ">eration", "\n")</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cat("0-it</span><span style="color: #000000; background-color: #ff8080; ">eration", "\n")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;a &lt;- rownames(optData$SUB_ID)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;a &lt;- rownames(optData$SUB_ID)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;write.csv(cbind(data.frame(ID = a),selData[a, ]), file = matchSampleFile, row.names = F)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;write.csv(cbind(data.frame(ID = a),selData[a, ]), file = matchSampleFile, row.names = F)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# Calculate the matched sample balance</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Calculate the matched sample balance</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;#=== Tabling pvalues and SMD for output ====</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#=== Tabling pvalues and SMD for output ====</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;S = list()</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S = list()</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;for (i in 1:length(selVars)) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for (i in 1:length(selVars)) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;S[[i]] = summaryNonMissingPair(optData, response, names(selVars)[i])</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S[[i]] = summaryNonMissingPair(optData, response, names(selVars)[i])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;allVarsSummary &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;allVarsSummary &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d40" href="#d40">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">list.append</span><span style="color: #000000; background-color: #ff8080; ">(S, S[[i]])</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">c</span><span style="color: #000000; background-color: #ff8080; ">(S, S[[i]])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;VarName &lt;- sapply( S, function(x) x$varname )</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;VarName &lt;- sapply( S, function(x) x$varname )</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d41" href="#d41">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;#list.cases(allVarsSummary, varname, sorted = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;SMD &lt;- lapply(S, function(x) x$smd)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SMD &lt;- lapply(S, function(x) x$smd)</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d42" href="#d42">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; # list.cases(allVarsSummary, smd, sorted = F, simplify = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp;#SMD &lt;- list.cases(allVarsSummary, smd, sorted = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;Pvalue &lt;- sapply(S, function(x) x$pval)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Pvalue &lt;- sapply(S, function(x) x$pval)</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d43" href="#d43">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; # list.cases(allVarsSummary, pval, sorted = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp;#print(rbind(VarName, SMD, Pvalue))</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;formattedSummaryPrint(VarName, SMD, Pvalue)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;formattedSummaryPrint(VarName, SMD, Pvalue)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;results &lt;- list()</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;results &lt;- list()</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;results$matches &lt;- cbind(data.frame(ID=a), selData[a, ])</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;results$matches &lt;- cbind(data.frame(ID=a), selData[a, ])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;results$varname &lt;- VarName</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;results$varname &lt;- VarName</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;results$smd &lt;- SMD</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;results$smd &lt;- SMD</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;results$pvalue &lt;- Pvalue</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;results$pvalue &lt;- Pvalue</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a name="d44" href="#d44">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span class="sf17b18">#</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# </span><span class="sf17b16">build</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">aggregated</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">lists</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">from</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">all</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">iterations</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "># &nbsp; &nbsp; &nbsp; </span><span class="sf17b16">condition</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">&lt;-</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">abs</span><span style="color: #000000; background-color: #ff8080; ">(</span><span class="sf17b16">sapply(S</span><span style="color: #000000; background-color: #ff8080; ">, </span><span class="sf17b16">function(x</span><span style="color: #000000; background-color: #ff8080; ">)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b18">allResults[[1]]</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">=</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">results</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "># &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">x$smd))</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">&lt;</span><span style="color: #000000; background-color: #ff8080; "> t</span><span class="sf17b16">hresh</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">queue$producer$fireAssignReactive</span><span style="color: #000000; background-color: #ff8080; ">(</span><span class="sf17b16">"allR<wbr>esultsReactive"</span><span style="color: #000000; background-color: #ff8080; ">, </span><span class="sf17b16">allResults</span><span style="color: #000000; background-color: #ff8080; ">) # </span><span class="sf17b16">Using</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">ipc</span><span style="color: #000000; background-color: #ff8080; "> t</span><span class="sf17b16">o</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">update</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">graph</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">as</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">iterMatch</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">runs</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;# check SMD threshold which is a list</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# check SMD threshold which is a list</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;condition &lt;- rep(FALSE, length(thresh))</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;condition &lt;- rep(FALSE, length(thresh))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;for (i in 1:length(S)) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for (i in 1:length(S)) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;x &lt;- S[[i]]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x &lt;- S[[i]]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;x_logic &lt;- abs(x$smd) &lt; thresh[i]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x_logic &lt;- abs(x$smd) &lt; thresh[i]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;x_logic &lt;- x_logic[!is.na(x_logic)]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x_logic &lt;- x_logic[!is.na(x_logic)]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;if (all(x_logic)) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (all(x_logic)) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;condition[i] &lt;- TRUE</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;condition[i] &lt;- TRUE</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;prodCondition &lt;- prod(condition)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;prodCondition &lt;- prod(condition)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;iteration &lt;- 1</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;iteration &lt;- 1</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d45" href="#d45">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp;cat(iteration, "it</span><span class="sf17b18">t</span><span style="color: #000000; background-color: #ff8080; ">eration" , sep = "-", "\n")</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cat(iteration, "it</span><span style="color: #000000; background-color: #ff8080; ">eration" , sep = "-", "\n")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b18">asyncTimer$set(message="Iterations:</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">",</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">detail=iteration,</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">value=1)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;#prodCondition==0</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#prodCondition==0</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;while (prodCondition == 0) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;while (prodCondition == 0) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;if (prodCondition == 0)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (prodCondition == 0)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Can we improve SMD? First which ASD has the largest</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Can we improve SMD? First which ASD has the largest</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#distance to selected control subjects with equal treated</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#distance to selected control subjects with equal treated</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#and control subjects.?</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#and control subjects.?</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;distance &lt;- NULL</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;distance &lt;- NULL</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d46" href="#d46">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">for</span><span style="color: #000000; background-color: #ff8080; "> (</span><span class="sf17b16">i</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">in</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">1:</span><span style="color: #000000; background-color: #ff8080; ">(table(optData[, response])[1])</span><span style="color: #000000; background-color: #ff8080; ">) </span><span style="color: #000000; background-color: #ff8080; ">{</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="color: #000000; background-color: #ff8080; ">distance &lt;-</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;c(distance, (DM[as.character(splitSubj[i, 1]), as.character(splitSubj[(i +</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">asyncTimer$set</span><span style="color: #000000; background-color: #ff8080; ">(</span><span class="sf17b16">message="Iterations:</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">",</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">detail=iteration,</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">value=iteration)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="sf17b16">(table(optData[,</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">response]</span><span style="color: #000000; background-color: #ff8080; ">)</span><span class="sf17b18">[1]))</span><span style="color: #000000; background-color: #ff8080; ">, 1])]))</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b18">groupSize</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b16">&lt;- </span><span style="color: #000000; background-color: #ff8080; ">(table(optData[, response])[1])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b18">print(groupSize</span><span style="color: #000000; background-color: #ff8080; ">)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b18">print("groupSize")</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b18">if(groupSize</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">&lt;</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">MIN_GROUP_SIZE)</span><span style="color: #000000; background-color: #ff8080; "> {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b18">print(paste("Group</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">size</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">&lt;</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">",</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">MIN_GROUP_SIZE,</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">".</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">Exiting</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">iterMatch.",</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">sep=""))</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b18">return(allResults)</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b18">}</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b18">for</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">(i</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">in</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">1:groupSize)</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">{</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;distance &lt;- c(distance, (DM[as.character(splitSubj[i, 1]), as.character(splitSubj[(i + </span><span class="sf17b16">groupSize</span><span style="color: #000000; background-color: #ff8080; ">)</span><span style="color: #000000; background-color: #ff8080; ">, 1])]))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;splitSubj &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;splitSubj &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;data.frame(splitSubj, distance)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;data.frame(splitSubj, distance)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Find the name of ASD subject has the largest distance</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Find the name of ASD subject has the largest distance</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# maxSubjs &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# maxSubjs &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# &nbsp; (splitSubj[splitSubj[, "distance"] != 100 , ])</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# &nbsp; (splitSubj[splitSubj[, "distance"] != 100 , ])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;excSubj &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;excSubj &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;splitSubj[which.max(splitSubj[, 2]), 1]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;splitSubj[which.max(splitSubj[, 2]), 1]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;print(excSubj)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(excSubj)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;#Get the list of ASD subject that partcipate in the matching</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#Get the list of ASD subject that partcipate in the matching</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;allMatchSubj = splitSubj[1:(table(optData[, response])[2]), 1]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;allMatchSubj = splitSubj[1:(table(optData[, response])[2]), 1]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;#remaining ASD subjects</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#remaining ASD subjects</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;remainedASD &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;remainedASD &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;as.character(allMatchSubj[allMatchSubj != excSubj])</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;as.character(allMatchSubj[allMatchSubj != excSubj])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;print(remainedASD)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(remainedASD)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;#trimed distance matrix of remaining treated and original control subjs</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#trimed distance matrix of remaining treated and original control subjs</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;trimedDM &lt;- DM[remainedASD, ]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;trimedDM &lt;- DM[remainedASD, ]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;#Redo the optimal matching</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#Redo the optimal matching</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;optMatch &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;optMatch &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fullmatch(</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fullmatch(</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;trimedDM,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;trimedDM,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;min.controls = 1,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;min.controls = 1,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;max.controls = 1,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;max.controls = 1,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;omit.fraction = NULL,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;omit.fraction = NULL,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tol = match.tol,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tol = match.tol,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subclass.indices = NULL</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subclass.indices = NULL</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;summary(optMatch)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;summary(optMatch)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;#print(optMatch, responseed = T)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#print(optMatch, responseed = T)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;#==== write the itterated matched output to a text file after ASD exclusion ====</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#==== write the itterated matched output to a text file after ASD exclusion ====</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;subMatchFile &lt;- sprintf("subjMatch_%s.txt", gsub("[.]", "-", format(Sys.time(), "%Y%m%d-%H-%M-%OS3")))</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subMatchFile &lt;- sprintf("subjMatch_%s.txt", gsub("[.]", "-", format(Sys.time(), "%Y%m%d-%H-%M-%OS3")))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;capture.output(print(optMatch, grouped = T), file = subMatchFile)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;capture.output(print(optMatch, grouped = T), file = subMatchFile)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;subjMatch &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subjMatch &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;read.table(</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;read.table(</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subMatchFile,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subMatchFile,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;header = T,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;header = T,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;colClasses = c("character", "character")</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;colClasses = c("character", "character")</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Print pairs of subjects to output</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Print pairs of subjects to output</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;print(subjMatch)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(subjMatch)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# delete temporary file</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# delete temporary file</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;if (file.exists(subMatchFile)) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (file.exists(subMatchFile)) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;file.remove(subMatchFile)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;file.remove(subMatchFile)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;splitSubj &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;splitSubj &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;do.call("rbind", strsplit(c(</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;do.call("rbind", strsplit(c(</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;as.character(subjMatch$Group),</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;as.character(subjMatch$Group),</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;as.character(subjMatch$Members)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;as.character(subjMatch$Members)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;), ","))</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;), ","))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;optData &lt;- selData[splitSubj,]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;optData &lt;- selData[splitSubj,]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;optData$SUB_ID &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;optData$SUB_ID &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(optData$SUB_ID)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(optData$SUB_ID)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;optData &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;optData &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;data.frame(pairNum = rep(1:length(levels(optMatch)), 2),</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;data.frame(pairNum = rep(1:length(levels(optMatch)), 2),</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SUB_ID = rownames(optData),</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SUB_ID = rownames(optData),</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; optData)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; optData)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;#optData &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#optData &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# &nbsp;(optData[order(optData[, response]),])</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# &nbsp;(optData[order(optData[, response]),])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;a &lt;- rownames(optData)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;a &lt;- rownames(optData)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;print(a)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(a)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;optimData &lt;- selData[a,]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;optimData &lt;- selData[a,]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;iteration &lt;- iteration + 1</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;iteration &lt;- iteration + 1</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;write.csv(cbind(data.frame(ID = a),selData[a, ]), file = matchSampleFile, row.names = F)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;write.csv(cbind(data.frame(ID = a),selData[a, ]), file = matchSampleFile, row.names = F)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;cat(</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cat(</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;iteration,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;iteration,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;"itteration============================<wbr>=================" ,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;"itteration============================<wbr>=================" ,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sep = "-",</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sep = "-",</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;"\n"</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;"\n"</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# Calc the balance of the matched sample</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Calc the balance of the matched sample</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;S &lt;- list()</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S &lt;- list()</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;allVarsSummary &lt;- list()</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;allVarsSummary &lt;- list()</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;for (i in 1:length(selVars)) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for (i in 1:length(selVars)) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S[[i]] = summaryNonMissingPair(optData, response, names(selVars)[i])</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S[[i]] = summaryNonMissingPair(optData, response, names(selVars)[i])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;allVarsSummary &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;allVarsSummary &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d47" href="#d47">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">list.append</span><span style="color: #000000; background-color: #ff8080; ">(allVarsSummary, S[[i]])</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="sf17b16">c</span><span style="color: #000000; background-color: #ff8080; ">(allVarsSummary, S[[i]])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;varName &lt;- sapply(S, function(x) x$varname)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;varName &lt;- sapply(S, function(x) x$varname)</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d48" href="#d48">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#list.cases(allVarsSummary, varname, sorted = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#list.cases(S, varname, sorted = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;SMD &lt;- lapply(S, function(x) x$smd)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SMD &lt;- lapply(S, function(x) x$smd)</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d49" href="#d49">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; #list.cases(allVarsSummary, smd, sorted = F, simplify = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; # list.cases(S, smd, sorted = F, simplify = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;#SMD &lt;- list.cases(allVarsSummary, smd, sorted = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;pvalue &lt;- sapply(S, function(x) x$pval)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;pvalue &lt;- sapply(S, function(x) x$pval)</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d50" href="#d50">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#list.cases(allVarsSummary, pval, sorted = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#list.cases(S, pval, sorted = F)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;#print(rbind(varName, SMD, pvalue))</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;formattedSummaryPrint(varName, SMD, pvalue)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;formattedSummaryPrint(varName, SMD, pvalue)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;#==== Tabling pvalues and SMD after matching ====</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#==== Tabling pvalues and SMD after matching ====</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;results &lt;- list()</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;results &lt;- list()</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;results$matches &lt;- cbind(data.frame(ID = a), selData[a, ])</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;results$matches &lt;- cbind(data.frame(ID = a), selData[a, ])</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;results$varname &lt;- varName</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;results$varname &lt;- varName</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;results$smd &lt;- SMD</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;results$smd &lt;- SMD</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;results$pvalue &lt;- pvalue</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;results$pvalue &lt;- pvalue</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a name="d51" href="#d51">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# build aggregated lists from all iterations</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;allResults[[iteration]] = results</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;queue$producer$fireAssignReactive("allR<wbr>esultsReactive", allResults) # Using ipc to update graph as iterMatch runs</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;# check SMD threshold</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# check SMD threshold</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;condition &lt;- rep(FALSE, length(thresh))</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;condition &lt;- rep(FALSE, length(thresh))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;for (i in 1:length(S)) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for (i in 1:length(S)) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x &lt;- S[[i]]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x &lt;- S[[i]]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x_logic &lt;- abs(x$smd) &lt; thresh[i]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x_logic &lt;- abs(x$smd) &lt; thresh[i]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x_logic &lt;- x_logic[!is.na(x_logic)]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x_logic &lt;- x_logic[!is.na(x_logic)]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (all(x_logic)) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (all(x_logic)) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;condition[i] &lt;- TRUE</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;condition[i] &lt;- TRUE</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a name="d52" href="#d52">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;# # condition &lt;-</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;# &nbsp; abs(sapply(S, function(x)</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;# &nbsp; &nbsp; x$smd)) &lt; thresh</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;prodCondition &lt;- prod(condition)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;prodCondition &lt;- prod(condition)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"><a name="d53" href="#d53">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp;# if (!is.null(outputfile)) {</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp;# &nbsp; sink()</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp;# }</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;print(proc.time() - ptm)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;print(proc.time() - ptm)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;if(!is.null(outputfile)) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;if(!is.null(outputfile)) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp;sink()</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sink()</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d54" href="#d54">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp;return( </span><span class="sf17b16">r</span><span style="color: #000000; background-color: #ff8080; ">esults )</span></code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;return( </span><span class="sf17b16">allR</span><span style="color: #000000; background-color: #ff8080; ">esults )</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#Grows a random forest</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">#Grows a random forest</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">growRF &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2">growRF &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;function (ntrees,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;function (ntrees,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;formula,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;formula,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;training,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;training,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;search,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;search,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;method,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;method,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;split = c ("information", "gini"),</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;split = c ("information", "gini"),</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;surrogateargs,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;surrogateargs,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;mtry,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;mtry,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;nsplit,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;nsplit,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;minsplit,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;minsplit,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;minbucket,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;minbucket,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;maxdepth,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;maxdepth,</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d55" href="#d55">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;progressIndicator = NULL,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bootstrap = TRUE,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bootstrap = TRUE,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;useRpart = FALSE) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;useRpart = FALSE) {</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d56" href="#d56">.</a></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;#Construct random forest</span>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;#Construct random forest </span><span class="sf17b18">w/progress</span><span style="color: #000000; background-color: #ff8080; "> </span><span class="sf17b18">bar</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;tstart &lt;- proc.time()</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;tstart &lt;- proc.time()</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d57" href="#d57">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;#progress &lt;- shiny::Progress$new(min=0, max=ntrees)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;#on.exit(progress$close())</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;if(!is.null(progressIndicator)) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;progressIndicator$set(message="Generati<wbr>ng Random Forest: ", value=0, detail=paste("(0/", ntrees, ")", sep=""))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;randFor &lt;- lapply(1:ntrees, function(b) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;randFor &lt;- lapply(1:ntrees, function(b) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (b %% 100 == 0) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (b %% 100 == 0) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print (paste0("Tree Number: ", b))</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print (paste0("Tree Number: ", b))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print (paste0("Time Since Tree Building Start (s): ", (proc.time()-tstart)[3] ))</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print (paste0("Time Since Tree Building Start (s): ", (proc.time()-tstart)[3] ))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (bootstrap == FALSE) {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (bootstrap == FALSE) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;obs.b &lt;- 1:nrow(training)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;obs.b &lt;- 1:nrow(training)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sample.b &lt;- training</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sample.b &lt;- training</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;} else {</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;} else {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;obs.b &lt;- sample(1:nrow(training),</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;obs.b &lt;- sample(1:nrow(training),</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;size = nrow(training),</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;size = nrow(training),</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;replace = T)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;replace = T)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sample.b &lt;- training[obs.b, ]</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sample.b &lt;- training[obs.b, ]</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code>&nbsp;</code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>&nbsp;</code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tree.b &lt;-</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tree.b &lt;-</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;grow (</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;grow (</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;formula = formula,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;formula = formula,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;data = sample.b,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;data = sample.b,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;search = search,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;search = search,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;method = method,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;method = method,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;split = split,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;split = split,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;surrogateargs = surrogateargs,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;surrogateargs = surrogateargs,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;mtry = mtry,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;mtry = mtry,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;nsplit = nsplit,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;nsplit = nsplit,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;minsplit = minsplit,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;minsplit = minsplit,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;minbucket = minbucket,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;minbucket = minbucket,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;maxdepth = maxdepth,</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;maxdepth = maxdepth,</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;useRpart = useRpart</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;useRpart = useRpart</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;)</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d58" href="#d58">.</a></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(!is.null(progressIndicator)) {</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;progressIndicator$inc(1, detail=paste("(", b, "/", ntrees, ")", sep=""))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td style="color: #000000; background-color: #c0c0c0; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span style="color: #000000; background-color: #ff8080; "> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;list (tree = tree.b, cases = sort(unique(obs.b)))</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;list (tree = tree.b, cases = sort(unique(obs.b)))</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;})</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;})</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;return(randFor)</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp; &nbsp; &nbsp;return(randFor)</span></code></td>
</tr>
<tr>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;}</span></code></td>
<td class="ln"></td><td class="sf3b2"><code><span class="sf3b2"> &nbsp; &nbsp;}</span></code></td>
</tr>
<tr>
<td class="ln"><a name="d59" href="#d59">.</a></td><td style="color: #000000; background-color: #ff8080; "><code>&nbsp;</code></td>
<td class="ln"></td><td style="color: #000000; background-color: #ff8080; "><code><span class="sf17b18">})</span>&nbsp;</code></td>
</tr>
</tbody>
</table>
</body>
</html>
